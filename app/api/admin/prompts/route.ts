import { NextRequest, NextResponse } from 'next/server';

interface Prompt {
  id: string;
  title: string;
  content: string;
  category: 'roi' | 'climate' | 'equipment' | 'market' | 'layout' | 'system';
  version: string;
  isActive: boolean;
  createdAt: string;
  lastModified: string;
  usage: number;
  performance: number;
}

export async function GET() {
  try {
    // Mock prompts data
    const mockPrompts: Prompt[] = [
      {
        id: 'prompt-001',
        title: 'ROI Analizi Promptu',
        content: 'Sen bir sera tarƒ±mƒ± uzmanƒ±sƒ±n. Kullanƒ±cƒ±nƒ±n verdiƒüi bilgilere g√∂re ROI (Yatƒ±rƒ±m Getirisi) analizi yap. A≈üaƒüƒ±daki fakt√∂rleri dikkate al:\n\n- ƒ∞lk yatƒ±rƒ±m maliyeti\n- Yƒ±llƒ±k i≈ületme giderleri\n- Beklenen gelir\n- Pazar ko≈üullarƒ±\n- Risk fakt√∂rleri\n\nDetaylƒ± bir analiz raporu hazƒ±rla.',
        category: 'roi',
        version: '2.1',
        isActive: true,
        createdAt: '2024-01-10T09:00:00Z',
        lastModified: '2024-01-15T14:30:00Z',
        usage: 1247,
        performance: 92.5
      },
      {
        id: 'prompt-002',
        title: 'ƒ∞klim Uygunluk Promptu',
        content: 'Sen bir meteoroloji ve tarƒ±m uzmanƒ±sƒ±n. Verilen lokasyon i√ßin sera tarƒ±mƒ±nƒ±n iklim uygunluƒüunu analiz et. Deƒüerlendirme kriterleri:\n\n- Sƒ±caklƒ±k deƒüi≈üimleri\n- Nem oranlarƒ±\n- Yaƒüƒ±≈ü durumu\n- R√ºzgar ko≈üullarƒ±\n- Mevsimsel deƒüi≈üiklikler\n\nRisk seviyesi ve √∂neriler i√ßeren rapor hazƒ±rla.',
        category: 'climate',
        version: '1.8',
        isActive: true,
        createdAt: '2024-01-12T11:15:00Z',
        lastModified: '2024-01-18T16:45:00Z',
        usage: 892,
        performance: 89.3
      },
      {
        id: 'prompt-003',
        title: 'Ekipman Se√ßim Promptu',
        content: 'Sen bir sera teknolojileri uzmanƒ±sƒ±n. Kullanƒ±cƒ±nƒ±n ihtiya√ßlarƒ±na g√∂re optimal ekipman listesi olu≈ütur. Dikkate alƒ±nacak fakt√∂rler:\n\n- Sera boyutu ve tipi\n- Yeti≈ütirilen √ºrÔøΩÔøΩn\n- B√ºt√ße kƒ±sƒ±tlarƒ±\n- Enerji verimliliƒüi\n- Otomasyon seviyesi\n\nDetaylƒ± ekipman listesi ve maliyet analizi sun.',
        category: 'equipment',
        version: '2.0',
        isActive: true,
        createdAt: '2024-01-08T13:20:00Z',
        lastModified: '2024-01-20T10:15:00Z',
        usage: 634,
        performance: 91.7
      },
      {
        id: 'prompt-004',
        title: 'Pazar Analizi Promptu',
        content: 'Sen bir tarƒ±m ekonomisti ve pazar analisti uzmanƒ±sƒ±n. Verilen √ºr√ºn i√ßin pazar analizi yap:\n\n- Mevcut pazar fiyatlarƒ±\n- Talep-arz durumu\n- Rekabet analizi\n- Sezonsal deƒüi≈üimler\n- Gelecek projeksiyonlarƒ±\n\nSatƒ±≈ü stratejileri ve fiyatlandƒ±rma √∂nerileri i√ßeren rapor hazƒ±rla.',
        category: 'market',
        version: '1.9',
        isActive: true,
        createdAt: '2024-01-14T08:30:00Z',
        lastModified: '2024-01-19T15:20:00Z',
        usage: 456,
        performance: 87.2
      },
      {
        id: 'prompt-005',
        title: 'Sera Layout Promptu',
        content: 'Sen bir sera tasarƒ±m uzmanƒ±sƒ±n. Verilen alan ve gereksinimler i√ßin optimal sera layout\'u tasarla:\n\n- Alan b√ºy√ºkl√ºƒü√º ve ≈üekli\n- √úr√ºn t√ºr√º ve miktarƒ±\n- ƒ∞≈ü akƒ±≈üƒ± optimizasyonu\n- Ekipman yerle≈üimi\n- Geni≈üleme potansiyeli\n\n3D model √∂nerisi ve verimlilik analizi sun.',
        category: 'layout',
        version: '2.2',
        isActive: true,
        createdAt: '2024-01-16T12:45:00Z',
        lastModified: '2024-01-21T09:10:00Z',
        usage: 378,
        performance: 94.1
      },
      {
        id: 'prompt-006',
        title: 'Sistem Yardƒ±m Promptu',
        content: 'Sen SeraGPT asistanƒ±sƒ±n. Kullanƒ±cƒ±lara sera tarƒ±mƒ± konusunda yardƒ±m et. Her zaman:\n\n- Kibar ve profesyonel ol\n- Doƒüru ve g√ºncel bilgi ver\n- Pratik √ß√∂z√ºmler √∂ner\n- G√ºvenlik uyarƒ±larƒ± yap\n- T√ºrk√ße dil kurallarƒ±na uy\n\nKullanƒ±cƒ± memnuniyetini √∂ncelikle d√º≈ü√ºn.',
        category: 'system',
        version: '3.0',
        isActive: true,
        createdAt: '2024-01-05T10:00:00Z',
        lastModified: '2024-01-22T14:30:00Z',
        usage: 2156,
        performance: 96.3
      }
    ];

    const stats = {
      totalPrompts: mockPrompts.length,
      activePrompts: mockPrompts.filter(p => p.isActive).length,
      categories: ['roi', 'climate', 'equipment', 'market', 'layout', 'system'].length,
      totalUsage: mockPrompts.reduce((sum, p) => sum + p.usage, 0),
      avgPerformance: Math.round(mockPrompts.reduce((sum, p) => sum + p.performance, 0) / mockPrompts.length * 10) / 10
    };

    return NextResponse.json({
      success: true,
      data: {
        prompts: mockPrompts,
        stats: stats,
        categories: [
          { id: 'roi', name: 'ROI Analizi', count: mockPrompts.filter(p => p.category === 'roi').length },
          { id: 'climate', name: 'ƒ∞klim Analizi', count: mockPrompts.filter(p => p.category === 'climate').length },
          { id: 'equipment', name: 'Ekipman Se√ßimi', count: mockPrompts.filter(p => p.category === 'equipment').length },
          { id: 'market', name: 'Pazar Analizi', count: mockPrompts.filter(p => p.category === 'market').length },
          { id: 'layout', name: 'Sera Layout', count: mockPrompts.filter(p => p.category === 'layout').length },
          { id: 'system', name: 'Sistem', count: mockPrompts.filter(p => p.category === 'system').length }
        ]
      }
    });

  } catch (error) {
    console.error('Prompts API Error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch prompts' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { title, content, category, version = '1.0' } = body;

    if (!title || !content || !category) {
      return NextResponse.json(
        { success: false, error: 'Title, content, and category are required' },
        { status: 400 }
      );
    }

    const newPrompt: Prompt = {
      id: `prompt-${Date.now()}`,
      title,
      content,
      category: category as any,
      version,
      isActive: true,
      createdAt: new Date().toISOString(),
      lastModified: new Date().toISOString(),
      usage: 0,
      performance: 0
    };

    console.log('üìù Yeni prompt olu≈üturuldu:', newPrompt);

    return NextResponse.json({
      success: true,
      data: newPrompt,
      message: 'Prompt ba≈üarƒ±yla olu≈üturuldu'
    });

  } catch (error) {
    console.error('Prompt Creation Error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to create prompt' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const { id, title, content, category, version, isActive } = body;

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Prompt ID is required' },
        { status: 400 }
      );
    }

    console.log('üìù Prompt g√ºncellendi:', { id, title, isActive });

    return NextResponse.json({
      success: true,
      message: 'Prompt ba≈üarƒ±yla g√ºncellendi'
    });

  } catch (error) {
    console.error('Prompt Update Error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to update prompt' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Prompt ID is required' },
        { status: 400 }
      );
    }

    console.log('üìù Prompt silindi:', id);

    return NextResponse.json({
      success: true,
      message: 'Prompt ba≈üarƒ±yla silindi'
    });

  } catch (error) {
    console.error('Prompt Delete Error:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to delete prompt' },
      { status: 500 }
    );
  }
}
